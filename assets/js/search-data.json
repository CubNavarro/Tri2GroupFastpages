{
  
    
        "post0": {
            "title": "Zestys",
            "content": "Logic Gate . By applying Boolean logic operations to binary inputs, which can be used to conduct arithmetic, comparison, and control operations in a computer’s central processing unit (CPU) and other digital circuits, logic gates can be utilized to execute fundamental computer functions. . | While logic gates are actual physical devices or circuits that physically implement these operations by controlling the flow of electricity through them, Boolean operations are abstract mathematical operations that are defined in Boolean algebra. Logic gates are the physical components that carry out boolean operations in digital circuits, whereas boolean operations are abstract notions used to express logical relationships between variables. . | . Binary Logic . . Binary Math . Write the two numerals one above the other, with the subtrahend (the second number) appearing beneath the minuend (the first number). Subtract each digit from its corresponding digit in the minuend, beginning with the subtrahend’s rightmost digit. Borrow 1 from the digit that is next to the left in the minuend if the digit in the subtrahend is larger than the digit in the minuend. Below the corresponding digits of the subtraction, write the outcome of each subtraction. The borrowed digit in the minuend is lowered by 1 if any borrowing occurs in step 2 at all. Until there is no more borrowing, this process is repeated. Create a binary number from the result of the subtraction. . | | . . API hacks . . .",
            "url": "https://cubnavarro.github.io/Tri2GroupFastpages/fastpages/markdown/2023/04/28/hacks.html",
            "relUrl": "/fastpages/markdown/2023/04/28/hacks.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Building Simulation/Interaction using Lists and Iteration - Student Copy",
            "content": "Vocabulary . Iteration - Repitition of a Process | For Loop - FOR LOOP repeats a function for a set number of times; I is the number of times repeated | While Loop - The while loop is used to repeat a section of code an unknown number of times until a specific condition is met | Initialization - What sets the counter variable to a starting value. For example (var i = 0) represents an initial value of 0. | Condition - Allows the computer to know whether or not to keep repeating the loop. | increment/decrement - Modifies the counter variable after each repetition. | Indexing / List Index - The position of an element in a list, starting from 0 | append, remove, pop - Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. | Elements [in a list] - An item in a list. | Nesting - Having one data type or function inside another data type or function, such as lists or loops. | array - Another name for a list, depends on the language | Key - the unique identifier associated with a value in a dictionary, such as name | Value - the data associated with a key in a dictionary, such as age | Pair - a key-value combination in a dictionary, such as a person&#39;s name + age | Mutable - the ability to be changed or modified | Tuple - an immutable ordered sequence of elements, similar to a list | Insertion - the process of adding a new key-value pair to a dictionary | Deletion - the process of removing a key-value pair from a dictionary | Keys method/keys() - a built-in Python function that returns a list of all keys in a dictionary | Values method/values() - a built-in Python function that returns a list of all values in a dictionary | Items method/items() - a built-in Python function that returns a list of all key-value pairs in a dictionary as tuples | Update method/update() - a built-in Python function that updates a dictionary with key-value pairs from another dictionary or iterable | Clear method/clear() - a built-in Python function that removes all key-value pairs from a dictionary | . Questions: . Give an example of iteration. | What is the difference between a for loop and while loop? That is, when would you use a for loop and when would you use a while loop? | In the APCSP AP exam, what number do indexes start with? important to know | Are dictionaries and lists mutable? | Simulations/Interactions . Building a simulation o#r interaction using lists and iteration in VS Code can be accomplished using a few simple steps: . Define your data: First, you need to define the data that your simulation will be working with. This could be a list of numbers, a list of strings, or any other type of data that your simulation will be manipulating. . | Write your simulation code: Once you have defined your data, you can start writing the code for your simulation. This code will typically involve iterating over your list of data, performing some operation on each item in the list, and updating the list accordingly. . | Test your simulation: After you have written your simulation code, it is important to test it to make sure it is working as expected. You can do this by running your code and checking the output to see if it matches what you expect. . | Refine your simulation: Once you have tested your simulation, you may need to refine it based on the results. This could involve tweaking the code to make it more efficient, adding new features, or fixing any bugs that you have discovered. . | Why use simulations? . Simulations can be useful because they can emulate real world situations without needing excessive resources (ex: money), time, or equipment. For example, a simulation of the effectiveness of a new seatbelt or airbag can be performed by simulating car crashes. This would be better than doing it in real life because you wouldn&#39;t want to place people in cars and then crash them for obvious reasons. | However, simulatins do assume things about the real world and can have biases. They can be oversimplified because the real world often has more complications and factors that can affect something. In the case of our car crash simulation, other things can have a big impact, such as the weather and experience of the driver. However, these things can sometimes be held constant in the simulations. | . Pros of using simulations: . Cost effective / resource efficient | Helps make accurate predictions | Speed | . Cons: . Only as accurate as the training data is | Bias | Needs to by simplified | . Questions: . Explain an example of something you could simulate. | Why are simulations useful and important? | Here&#39;s a simple example of a simulation in Python that uses lists and iteration to calculate the average of a list of numbers: . numbers = [1, 2, 3, 4, 5] # Initialize the sum and count variables sum = 0 count = 0 # Iterate over the list of numbers, adding each number to the sum for number in numbers: sum += number count += 1 # Calculate the average of the list of numbers average = sum / count # Print the average print(&quot;The average of the list is:&quot;, average) . The average of the list is: 3.0 . This code defines a list of numbers, iterates over the list to calculate the sum and count of the numbers, and then calculates the average by dividing the sum by the count. Finally, it prints the average to the console. . Lists . Iteration statements can be used to traverse a list | Knowldege of exisiting algorithms that use iteration can help in constructing new algorithms. Some are: Determining a minimum or maximum value in a list | Computing a sum or average of a list of numbers | . | . What are Lists? . Lists are a way to store data types such as strings, integers, and floats.. | Each sequence is demarcated with an index, starting from 0. This is known as base 0 indexing | In memory, it is stored as a variable name with multiple pointers to each variable stored in a certain order | Lists can also be called arrays | Lists have methods that act upon the list and change them. This moves the pointers within RAM to change the parts of the list. | . Nested Lists . Uses of Nested lists . Placing lists within lists allows you to have arrays of similar data together, and create complexity. . Some uses include: . Creating 2d Arrays | Storing similar, but slightly different categories (sublists) | Create a matrix | . Iteration . Iterative statements are also called loops, and they repeat themselves over and over until the condition for stopping is met. . In College Board&#39;s Pseudocode, the first is a REPEAT n TIMES loop, where the n represents some number. | . The second type of loop is a REPEAT UNTIL (condition) loop, where the loop will continue to run until a condition is met. . Conceptually, a while loop is very similar to an if conditional, except that a while is continually executed until it&#39;s no longer true and an if is only executed once. . Questions: . Describe a situation where you would need iteration. | Describe the difference between a &quot;REPEAT n TIMES&quot; loop VS a &quot;REPEAT UNTIL (condition)&quot; loop. it is important you know this for the AP Exam | Libaries . A software library contains procedures that may be used in creating new programs. | Existing code segments can come from internal or external sources, such as libaries or previously written code. | The use of libaries simplifies the task of creating complex programs. | . APIs . Application program interfaces (APIs) are specifications for how the procedures in a libary behave and can be used as documentation for an API/libary is necessary in understanding the behaviors provided by the API and how to use them. . A file that contains procedures that can be used in a program is considered a libary. . API provides specifications for how procedures in a library behave and can be used. | Many companies use APIs for programmers to interact with their products. | . Questions: . What are some libraries that we&#39;ve learned about? What are their advantages/disadvantages? | Dictionaries . What are Dictionaries? . a collection of key-value pairs that is not ordered, where each key is saved and connected to a particular value. | referred to as hash tables, maps, or associative arrays in some programming languages | used to store and retrieve data efficiently, as they allow fast access to values based on their associated keys | beneficial for a variety of jobs, including storing, indexing, and counting | . What are the types of Dictionaries? . Ordered Dictionaries . Iterates through the values and keys in the same order that the keys were inserted. | A deleted entry that is later reinserted will be placed at the end of the dictionary. | Particularly created to keep its items organized | Helpful when processing data in a specified sequence or when the order of insertion is critical. | An ordered dictionary is preferable if the data&#39;s order is crucial. | . How to create an ordered dictionary? . Import collections&#39; OrderedDict | To create a blank ordered dictionary, instantiate OrderedDict without giving the constructor any arguments. | Increase the dictionary&#39;s key-value pairs by putting a key in square brackets ([]) and giving it a value. | Print out the requested dictionary. | Repeat the sorted dictionary&#39;s elements. | Regular Dictionaries . Mutable; once being formed, key-value pairs may be added, removed, or modified. | Used to store key-value pairs of data values. | Loops can be used for iteration | A normal dictionary might perform better if order is not crucial. | . How to create a regular dictionary? . Make a variable with the name of the dictionary as its value. | Put the variable in a set of curly braces without any content. | Use the dict() OR empty curly braces to create a dictionary. | Questions: . Compare and contrast lists and dictionaries. | Do dictionary keys need to be unique? | folklore_album = { &quot;title&quot;: &quot;Folklore&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2020, &quot;genre&quot;: [&quot;Alternative/Indie&quot;, &quot;Pop&quot;], &quot;tracks&quot;: { 1: [&quot;the 1&quot;, 7], 2: [&quot;cardigan&quot;, 9], 3: [&quot;the last great american dynasty&quot;, 7], 4: [&quot;exile (ft. Bon Iver)&quot;, 10], 5: [&quot;my tears ricochet&quot;, 7], 6: [&quot;mirrorball&quot;, 6], 7: [&quot;seven&quot;, 5], 8: [&quot;august&quot;, 7], 9: [&quot;this is me trying&quot;, 7], 10: [&quot;illicit affairs&quot;, 8], 11: [&quot;invisible string&quot;, 6], 12: [&quot;mad woman&quot;, 7], 13: [&quot;epiphany&quot;, 6], 14: [&quot;betty&quot;, 8], 15: [&quot;peace&quot;, 9], 16: [&quot;hoax&quot;, 7], 17: [&quot;the lakes&quot;, 6] } } # Printing the dictionary print(folklore_album) . {&#39;title&#39;: &#39;Folklore&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2020, &#39;genre&#39;: [&#39;Alternative/Indie&#39;, &#39;Pop&#39;], &#39;tracks&#39;: {1: [&#39;the 1&#39;, 7], 2: [&#39;cardigan&#39;, 19], 3: [&#39;the last great american dynasty&#39;, 7], 4: [&#39;exile (ft. Bon Iver)&#39;, 10], 5: [&#39;my tears ricochet&#39;, 7], 6: [&#39;mirrorball&#39;, 6], 7: [&#39;seven&#39;, 5], 8: [&#39;august&#39;, 7], 9: [&#39;this is me trying&#39;, 7], 10: [&#39;illicit affairs&#39;, 8], 11: [&#39;invisible string&#39;, 6], 12: [&#39;mad woman&#39;, 7], 13: [&#39;epiphany&#39;, 6], 14: [&#39;betty&#39;, 8], 15: [&#39;peace&#39;, 9], 16: [&#39;hoax&#39;, 7], 17: [&#39;the lakes&#39;, 6]}} . for i in folklore_album[&quot;tracks&quot;]: print(&quot;track #&quot; + str(i) + &quot;: &quot; + folklore_album[&quot;tracks&quot;][i][0]) print(&quot; my rating: &quot; + str(folklore_album[&quot;tracks&quot;][i][1]) + &quot;/10&quot;) . track #1: the 1 my rating: 7/10 track #2: cardigan my rating: 19/10 track #3: the last great american dynasty my rating: 7/10 track #4: exile (ft. Bon Iver) my rating: 10/10 track #5: my tears ricochet my rating: 7/10 track #6: mirrorball my rating: 6/10 track #7: seven my rating: 5/10 track #8: august my rating: 7/10 track #9: this is me trying my rating: 7/10 track #10: illicit affairs my rating: 8/10 track #11: invisible string my rating: 6/10 track #12: mad woman my rating: 7/10 track #13: epiphany my rating: 6/10 track #14: betty my rating: 8/10 track #15: peace my rating: 9/10 track #16: hoax my rating: 7/10 track #17: the lakes my rating: 6/10 . Code Examples . Reverse a list utilizing features of lists and iteration . original_list = [1, 2, 3, 4, 5] print(&quot;List before reverse : &quot;,original_list) reversed_list = [] for value in original_list: reversed_list = [value] + reversed_list print(&quot;List after reverse : &quot;, reversed_list) . List before reverse : [1, 2, 3, 4, 5] List after reverse : [5, 4, 3, 2, 1] . Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array. Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;array before sort {list}&quot;) def insertion_sort(list): for index in range(1,len(list)): # repeats through length of the array value = list[index] i = index - 1 while i &gt;= 0: if value &lt; list[i]: list[i+1] = list[i] # shift number in slot i to the right list[i] = value # shift value left into slot i i = i - 1 else: break IS = insertion_sort(list) print(f&quot;array after sort {list}&quot;) . array before sort [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] array after sort [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Here is a list comprehension example, using lists to create lists. . Below, only songs in the folklore album that have less than 7 characters in their titles are printed. . TS_folklore = [&quot;exile&quot;, &quot;my tears ricochet&quot;, &quot;this is me trying&quot;, &quot;illicit affairs&quot;, &quot;august&quot;, &quot;mirrorball&quot;, &quot;betty&quot;, &quot;mad woman&quot;, &quot;epiphany&quot;, &quot;peace&quot;, &quot;cardigan&quot;] # this list is only songs that have less than 10 characters in the title TS_folklore_updated = [x for x in TS_folklore if len(x) &lt; 7] print(&quot;These are the songs in Taylor Swift&#39;s folklore album that have less than 7 characters in their title&quot;) print(TS_folklore_updated) . These are the songs in Taylor Swift&#39;s folklore album that have less than 7 characters in their title [&#39;exile&#39;, &#39;august&#39;, &#39;betty&#39;, &#39;peace&#39;] . Below, only songs that have a rating greater than 7 will be printed. . TS_folklore_ratings = {&quot;exile&quot;: 8, &quot;my tears ricochet&quot;: 6, &quot;this is me trying&quot;: 7, &quot;illicit affairs&quot;: 8, &quot;august&quot;: 4, &quot;mirrorball&quot;: 3, &quot;betty&quot;: 6, &quot;mad woman&quot;: 6, &quot;epiphany&quot;: 2, &quot;peace&quot;: 10, &quot;cardigan&quot;: 10} TS_folklore_best = {k:v for (k,v) in TS_folklore_ratings.items() if v&gt;7} print(&quot;These are the songs in Taylor Swift&#39;s folklore album that I give a rating greater than 7&quot;) print(TS_folklore_best) . These are the songs in Taylor Swift&#39;s folklore album that I give a rating greater than 7 {&#39;exile&#39;: 8, &#39;illicit affairs&#39;: 8, &#39;peace&#39;: 10, &#39;cardigan&#39;: 10} . Questions: . How is list comprehension similar to iteration? | Hacks . The difference between lists and dictionaries is that Aalist is an ordered collection of elements that can be of different data types, while a dictionary is an unordered collection of key-value pairs. In a list, elements are accessed by their index, which is an integer value, while in a dictionary, elements accessed by their keys, which can be any data type such as a string or a number. | . import random aewss = { &quot;title&quot;: &quot;An Evening With Silk Sonic&quot;, &quot;artist&quot;: &quot;Silk Sonic&quot;, &quot;year&quot;: 2022, &quot;genre&quot;: [&quot;R&amp;B&quot;, &quot;Soul&quot;], &quot;tracks&quot;: { 1: &quot;Silk Sonic Intro&quot;, 2: &quot;Starboy&quot;, 3: &quot;Just wanna Rock&quot;, 4: &quot;Waiting for Love&quot;, 5: &quot;Smokin Out The Window&quot;, 6: &quot;Infinity&quot;, 7: &quot;777&quot;, 8: &quot;Dance Monkey&quot;, 9: &quot;Riptide&quot;, 10: &quot;life goes on&quot; } } print(&quot;Printing the greatest album of all time: n&quot;) print(&quot;Album Title:&quot;, aewss[&quot;title&quot;]) print(&quot;Artist:&quot;, aewss[&quot;artist&quot;]) print(&quot;Year:&quot;, aewss[&quot;year&quot;]) print(&quot;Genre:&quot;, &quot;, &quot;.join(aewss[&quot;genre&quot;])) print(&quot; nTracklist:&quot;) for track_num, track_title in aewss[&quot;tracks&quot;].items(): print(track_num, &quot;-&quot;, track_title) random_track_number = random.choice(list(aewss[&quot;tracks&quot;].keys())) random_track = aewss[&quot;tracks&quot;][random_track_number] print(&quot; &quot;) print(&quot;Here&#39;s a song recommendation:&quot;) print(random_track_number, &quot;-&quot;, random_track) print(&quot; &quot;) print(&quot;Here&#39;s the tracks in alphabetical order:&quot;) sorted_tracks = sorted(aewss[&quot;tracks&quot;].values(), key=lambda x: x.lower()) print(sorted_tracks) print(&quot;&quot;) print(&quot;Here&#39;s the tracks sorted by shortest to longest title length:&quot;) shortest_tracks = sorted(aewss[&quot;tracks&quot;].values(), key=lambda x: len(x)) print(shortest_tracks) . Printing the greatest album of all time: Album Title: An Evening With Silk Sonic Artist: Silk Sonic Year: 2022 Genre: R&amp;B, Soul Tracklist: 1 - Silk Sonic Intro 2 - Starboy 3 - Just wanna Rock 4 - Waiting for Love 5 - Smokin Out The Window 6 - Infinity 7 - 777 8 - Dance Monkey 9 - Riptide 10 - life goes on Here&#39;s a song recommendation: 9 - Riptide Here&#39;s the tracks in alphabetical order: [&#39;777&#39;, &#39;Dance Monkey&#39;, &#39;Infinity&#39;, &#39;Just wanna Rock&#39;, &#39;life goes on&#39;, &#39;Riptide&#39;, &#39;Silk Sonic Intro&#39;, &#39;Smokin Out The Window&#39;, &#39;Starboy&#39;, &#39;Waiting for Love&#39;] Here&#39;s the tracks sorted by shortest to longest title length: [&#39;777&#39;, &#39;Starboy&#39;, &#39;Riptide&#39;, &#39;Infinity&#39;, &#39;Dance Monkey&#39;, &#39;life goes on&#39;, &#39;Just wanna Rock&#39;, &#39;Silk Sonic Intro&#39;, &#39;Waiting for Love&#39;, &#39;Smokin Out The Window&#39;] . import random def cricket(): book = { &#39;0&#39;: 0, &#39;1&#39;: 1, &#39;2&#39;: 2, &#39;3&#39;: 3, &#39;4&#39;: 4, &#39;5&#39;: 5, &#39;6&#39;: 6, &#39;7&#39;: -1, &#39;8&#39;: -2, &#39;9&#39;: -3, } team_name = input(&quot;Enter the name of your team: &quot;) print(&quot;Welcome to Aniket&#39;s Cricket Simulator, {}!&quot;.format(team_name)) score = 0 wickets = 10 while wickets &gt; 0: input(&quot;Press enter to face the next ball...&quot;) run = (random.randint(0, 9)) if int(run) &lt; 7: print(&quot;You scored&quot;, run, &quot;runs&quot;) score += run print(&quot;Your score is now {}.&quot;.format(score)) else: print(&quot;Oh no, you got out! You have &quot;, wickets, &quot;wickets left!&quot;) wickets -= 1 print(&quot;All out! Your final score is {} ({} wickets lost).&quot;.format(score, 10 - wickets)) cricket() . Welcome to Aniket&#39;s Cricket Simulator, Coding Super Kings! Oh no, you got out! You have 10 wickets left! Oh no, you got out! You have 9 wickets left! You scored 5 runs Your score is now 5. You scored 0 runs Your score is now 5. You scored 2 runs Your score is now 7. You scored 4 runs Your score is now 11. Oh no, you got out! You have 8 wickets left! Oh no, you got out! You have 7 wickets left! You scored 1 runs Your score is now 12. Oh no, you got out! You have 6 wickets left! Oh no, you got out! You have 5 wickets left! Oh no, you got out! You have 4 wickets left! You scored 3 runs Your score is now 15. You scored 3 runs Your score is now 18. Oh no, you got out! You have 3 wickets left! Oh no, you got out! You have 2 wickets left! Oh no, you got out! You have 1 wickets left! All out! Your final score is 18 (10 wickets lost). . I got a 5/10 on the Kahoot. I need to look into it more and study this infomation because I did kinda well on the first 4 questions then got worse and worse so I need to study the lesson more and improve my knowledge .",
            "url": "https://cubnavarro.github.io/Tri2GroupFastpages/student/2023/04/28/P4Y-Simulation-Lists-Iteration.html",
            "relUrl": "/student/2023/04/28/P4Y-Simulation-Lists-Iteration.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Food Guessing Game",
            "content": "import random foods = [ {&quot;name&quot;: &quot;Pizza&quot;, &quot;description&quot;: &quot;A baked dish made of dough, tomato sauce, and toppings such as cheese and meat.&quot;}, {&quot;name&quot;: &quot;Sushi&quot;, &quot;description&quot;: &quot;A Japanese dish consisting of small balls or rolls of vinegar-flavored cold cooked rice served with a garnish of vegetables, egg, or raw seafood.&quot;}, {&quot;name&quot;: &quot;Burger&quot;, &quot;description&quot;: &quot;A sandwich consisting of a grilled beef patty served on a bun, often with cheese, lettuce, tomato, and other toppings.&quot;}, {&quot;name&quot;: &quot;Taco&quot;, &quot;description&quot;: &quot;A traditional Mexican dish consisting of a corn or wheat tortilla filled with meat, beans, cheese, and vegetables.&quot;}, {&quot;name&quot;: &quot;Pad Thai&quot;, &quot;description&quot;: &quot;A stir-fried noodle dish commonly served as a street food and in casual restaurants in Thailand.&quot;}, {&quot;name&quot;: &quot;Fish and Chips&quot;, &quot;description&quot;: &quot;A British dish consisting of battered fish and deep-fried chips (French fries).&quot;} ] points = 0 for i in range(len(foods)): food = random.choice(foods) print(&quot;What food item is described as follows?&quot;) print(food[&quot;description&quot;]) guess = input(&quot;Guess the name of the food item: &quot;) if guess.lower() == food[&quot;name&quot;].lower(): print(&quot;Correct! You earned 10 points.&quot;) points += 10 else: print(&quot;Incorrect. The correct answer is&quot;, food[&quot;name&quot;], &quot;. You lost 5 points.&quot;) points -= 5 foods.remove(food) print(&quot;Game over. Your final score is&quot;, points) . What food item is described as follows? A British dish consisting of battered fish and deep-fried chips (French fries). Correct! You earned 10 points. What food item is described as follows? A stir-fried noodle dish commonly served as a street food and in casual restaurants in Thailand. Incorrect. The correct answer is Pad Thai . You lost 5 points. What food item is described as follows? A baked dish made of dough, tomato sauce, and toppings such as cheese and meat. Incorrect. The correct answer is Pizza . You lost 5 points. What food item is described as follows? A sandwich consisting of a grilled beef patty served on a bun, often with cheese, lettuce, tomato, and other toppings. Correct! You earned 10 points. What food item is described as follows? A traditional Mexican dish consisting of a corn or wheat tortilla filled with meat, beans, cheese, and vegetables. Incorrect. The correct answer is Taco . You lost 5 points. What food item is described as follows? A Japanese dish consisting of small balls or rolls of vinegar-flavored cold cooked rice served with a garnish of vegetables, egg, or raw seafood. Correct! You earned 10 points. Game over. Your final score is 15 . Another Version of the Food game . This version Makes it so that you have 2 options to choose from and this was the next section that I wanted to complete and improve. Next version has only one round instead of asking multiple times. . import random foods = [ {&quot;name&quot;: &quot;Pizza&quot;, &quot;description&quot;: &quot;A baked dish made of dough, tomato sauce, and toppings such as cheese and meat.&quot;}, {&quot;name&quot;: &quot;Sushi&quot;, &quot;description&quot;: &quot;A Japanese dish consisting of small balls or rolls of vinegar-flavored cold cooked rice served with a garnish of vegetables, egg, or raw seafood.&quot;}, {&quot;name&quot;: &quot;Burger&quot;, &quot;description&quot;: &quot;A sandwich consisting of a grilled beef patty served on a bun, often with cheese, lettuce, tomato, and other toppings.&quot;}, {&quot;name&quot;: &quot;Taco&quot;, &quot;description&quot;: &quot;A traditional Mexican dish consisting of a corn or wheat tortilla filled with meat, beans, cheese, and vegetables.&quot;}, {&quot;name&quot;: &quot;Pad Thai&quot;, &quot;description&quot;: &quot;A stir-fried noodle dish commonly served as a street food and in casual restaurants in Thailand.&quot;}, {&quot;name&quot;: &quot;Fish and Chips&quot;, &quot;description&quot;: &quot;A British dish consisting of battered fish and deep-fried chips (French fries).&quot;}] points = 0 rounds = 5 for i in range(rounds): # Select two random foods from the list food1, food2 = random.sample(foods, 2) print(&quot;Which of the following foods is described as follows?&quot;) print(&quot;1. &quot; + food1[&quot;description&quot;]) print(&quot;2. &quot; + food2[&quot;description&quot;]) guess = int(input(&quot;Enter 1 or 2 to guess: &quot;)) if guess == 1 and food1[&quot;name&quot;].lower() == input(&quot;Guess the name of the first food item: &quot;).lower(): print(&quot;Correct! You earned 10 points.&quot;) points += 10 elif guess == 2 and food2[&quot;name&quot;].lower() == input(&quot;Guess the name of the second food item: &quot;).lower(): print(&quot;Correct! You earned 10 points.&quot;) points += 10 else: print(&quot;Incorrect. The correct answer is&quot;, food1[&quot;name&quot;] + &quot; or &quot; + food2[&quot;name&quot;], &quot;. You lost 5 points.&quot;) points -= 5 print(&quot;Game over. Your final score is&quot;, points) . Getting the Answer correct . This is the version when you get the answer correct . import random foods = [ {&quot;name&quot;: &quot;Pizza&quot;, &quot;description&quot;: &quot;A baked dish made of dough, tomato sauce, and toppings such as cheese and meat.&quot;}, {&quot;name&quot;: &quot;Sushi&quot;, &quot;description&quot;: &quot;A Japanese dish consisting of small balls or rolls of vinegar-flavored cold cooked rice served with a garnish of vegetables, egg, or raw seafood.&quot;}, {&quot;name&quot;: &quot;Burger&quot;, &quot;description&quot;: &quot;A sandwich consisting of a grilled beef patty served on a bun, often with cheese, lettuce, tomato, and other toppings.&quot;}, {&quot;name&quot;: &quot;Taco&quot;, &quot;description&quot;: &quot;A traditional Mexican dish consisting of a corn or wheat tortilla filled with meat, beans, cheese, and vegetables.&quot;}, {&quot;name&quot;: &quot;Pad Thai&quot;, &quot;description&quot;: &quot;A stir-fried noodle dish commonly served as a street food and in casual restaurants in Thailand.&quot;}, {&quot;name&quot;: &quot;Fish and Chips&quot;, &quot;description&quot;: &quot;A British dish consisting of battered fish and deep-fried chips (French fries).&quot;} ] # Select two random foods from the list food1, food2 = random.sample(foods, 2) print(&quot;Which of the following foods is described as follows?&quot;) print(&quot;1. &quot; + food1[&quot;description&quot;]) print(&quot;2. &quot; + food2[&quot;description&quot;]) guess = int(input(&quot;Enter 1 or 2 to guess: &quot;)) if guess == 1 and food1[&quot;name&quot;].lower() == input(&quot;Guess the name of the first food item: &quot;).lower(): print(&quot;Correct! You guessed the food item correctly.&quot;) elif guess == 2 and food2[&quot;name&quot;].lower() == input(&quot;Guess the name of the second food item: &quot;).lower(): print(&quot;Correct! You guessed the food item correctly.&quot;) else: print(&quot;Incorrect. The correct answer for Question 1 is&quot;, food1[&quot;name&quot;] + &quot; and the answer for the Question 2 is&quot; + food2[&quot;name&quot;]) print(&quot;Thanks For Playing the Game.&quot;) . Which of the following foods is described as follows? 1. A baked dish made of dough, tomato sauce, and toppings such as cheese and meat. 2. A British dish consisting of battered fish and deep-fried chips (French fries). Correct! You guessed the food item correctly. Thanks For Playing the Game. . Getting the Answer Wrong . This is the Final version of the game . import random foods = [ {&quot;name&quot;: &quot;Pizza&quot;, &quot;description&quot;: &quot;A baked dish made of dough, tomato sauce, and toppings such as cheese and meat.&quot;}, {&quot;name&quot;: &quot;Sushi&quot;, &quot;description&quot;: &quot;A Japanese dish consisting of small balls or rolls of vinegar-flavored cold cooked rice served with a garnish of vegetables, egg, or raw seafood.&quot;}, {&quot;name&quot;: &quot;Burger&quot;, &quot;description&quot;: &quot;A sandwich consisting of a grilled beef patty served on a bun, often with cheese, lettuce, tomato, and other toppings.&quot;}, {&quot;name&quot;: &quot;Taco&quot;, &quot;description&quot;: &quot;A traditional Mexican dish consisting of a corn or wheat tortilla filled with meat, beans, cheese, and vegetables.&quot;}, {&quot;name&quot;: &quot;Pad Thai&quot;, &quot;description&quot;: &quot;A stir-fried noodle dish commonly served as a street food and in casual restaurants in Thailand.&quot;}, {&quot;name&quot;: &quot;Fish and Chips&quot;, &quot;description&quot;: &quot;A British dish consisting of battered fish and deep-fried chips (French fries).&quot;} ] # Select two random foods from the list food1, food2 = random.sample(foods, 2) print(&quot;Which of the following foods is described as follows?&quot;) print(&quot;1. &quot; + food1[&quot;description&quot;]) print(&quot;2. &quot; + food2[&quot;description&quot;]) guess = int(input(&quot;Enter 1 or 2 to guess: &quot;)) if guess == 1 and food1[&quot;name&quot;].lower() == input(&quot;Guess the name of the first food item: &quot;).lower(): print(&quot;Correct! You guessed the food item correctly.&quot;) elif guess == 2 and food2[&quot;name&quot;].lower() == input(&quot;Guess the name of the second food item: &quot;).lower(): print(&quot;Correct! You guessed the food item correctly.&quot;) else: print(&quot;Incorrect. The correct answer for Question 1 is&quot;, food1[&quot;name&quot;] + &quot; and the answer for the Question 2 is&quot; + food2[&quot;name&quot;]) print(&quot;Thanks For Playing the Game.&quot;) . Which of the following foods is described as follows? 1. A traditional Mexican dish consisting of a corn or wheat tortilla filled with meat, beans, cheese, and vegetables. 2. A Japanese dish consisting of small balls or rolls of vinegar-flavored cold cooked rice served with a garnish of vegetables, egg, or raw seafood. Incorrect. The correct answer for Question 1 is Taco and the answer for the Question 2 isSushi Thanks For Playing the Game. .",
            "url": "https://cubnavarro.github.io/Tri2GroupFastpages/2023/04/12/CPTproject.html",
            "relUrl": "/2023/04/12/CPTproject.html",
            "date": " • Apr 12, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: Processor Intel(R) Core(TM) i7-3517U CPU @ 1.90GHz, 2401 Mhz, 2 Core(s), 4 Logical Processor(s) | Memory in GB: 8.00 GB | Storage in GB: 237 GB | OS: OS Name Microsoft Windows 10 Pro | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path - a | Route - e | Computer System - b | Computer Device - c | Bandwidth - d | Computer Network - f | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions | . T | F | F | T | F | T correct answer: F | T | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. yes, it is fault tolerant, even if one path goes down, you can communicate with the other ones | no, only one path to F, so if one wire goes down, F is also cut off | no, only one wire connecting A and G | | . 4.2 video 2 practice: . C | A | the internet is fault tolerant Network where devices can communicate with one another even if one path goes down. It’s important to have redundancy in your network, so that if one wire goes down, the other devices can still function because there is more than one path between connected devices. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily video 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . load balancing with an API | . What is naturally Distributed in Frontend/Backend architecture? The backend is naturally distributed as it typically consists of multiple servers, each responsible for handling different tasks or services. By distributing the backend, the application can handle a large number of requests, improve performance and reliability, and provide fault tolerance and high availability. The frontend, on the other hand, is typically executed on a single client device, such as a web browser or mobile app, and is responsible for displaying the user interface and interacting with the user. . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . In the context of a Docker image that runs a Python/Gunicorn web application, this command is used to configure the Gunicorn web server. The –workers option specifies the number of worker processes that Gunicorn should spawn to handle incoming requests. In this case, the value is set to 1, which means that Gunicorn will use a single worker process to handle all requests. The –bind option specifies the IP address and port number that Gunicorn should bind to, in this case, 0.0.0.0:8086, which means that Gunicorn will listen on all network interfaces on port 8086. . To enable parallel computing in Python/Gunicorn web application, you can adjust the –workers option to a higher value, which will spawn multiple worker processes to handle incoming requests concurrently. However, increasing the number of worker processes may also increase the memory usage and CPU load of the server. . CHALLENGE: seek how many workers I have set up on gunicorn and set up more I think there are currently 4 workers on gunicorn, I can run gunicorn myapp:app -w 8 to set up more. | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. Ray is a distributed computing system that makes it easy to write parallel and distributed Python applications. It is designed to be efficient and scalable, and can help you parallelize your code across multiple CPU cores, GPUs, or even multiple machines. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://cubnavarro.github.io/Tri2GroupFastpages/2023/04/05/AP_computers_networks.md.1",
            "relUrl": "/2023/04/05/AP_computers_networks.md.1",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: 1 GH | Memory in GB: 8 Gb | Storage in GB: 237 GB | OS: Windows 11 . | Processor GHz: 3.47 GH | Memory in GB: 16 Gb | Storage in GB: 512 GB | OS: Mac OS | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://cubnavarro.github.io/Tri2GroupFastpages/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a ___. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is ___. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # # # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # # . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][6]) . The Man I Think He Knows . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? # # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? . Lover . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . My response to Fav Taylor Swirft song . My favorite Taylor Swift song is Shake it off because that&#39;s one of the songs that I grew up with and for me is very catchy. There are many other songs from Taylor Swift but this is the song that I remember more than any other song. Also the song has very catchy lyrics that when you hear it you remember it and stays in your head for a while. The melody and is really nice and is a super easy song to sing along with too. . import pprint nfl_team = { &quot;League&quot;: &quot;NFL&quot;, &quot;Country&quot;: &quot;North America&quot;, &quot;Current Season&quot;: &#39;2022-2023&#39;, &quot;Teams&quot;: { 1: &quot;Bills&quot;, 2: &quot;Raiders&quot;, 3: &quot;Packers&quot;, 4: &quot;Chargers&quot;, 5: &quot;Falcons&quot;, } } pprint.pprint(nfl_team) . {&#39;Country&#39;: &#39;North America&#39;, &#39;Current Season&#39;: &#39;2022-2023&#39;, &#39;League&#39;: &#39;NFL&#39;, &#39;Teams&#39;: {1: &#39;Bills&#39;, 2: &#39;Raiders&#39;, 3: &#39;Packers&#39;, 4: &#39;Chargers&#39;, 5: &#39;Falcons&#39;}} . import pprint nfl_team = { &quot;League&quot;: &quot;NFL&quot;, &quot;Country&quot;: &quot;North America&quot;, &quot;Current Season&quot;: &#39;2022-2023&#39;, &quot;Teams&quot;: { 1: &quot;Bills&quot;, 2: &quot;Raiders&quot;, 3: &quot;Packers&quot;, 4: &quot;Chargers&quot;, 5: &quot;Falcons&quot;, } } nfl_team [&quot;Best Players&quot;] = ([&#39;Josh Allen&#39;, &#39;Davante Adams&#39;, &#39;Aaron Rodgers&#39;, &#39;Cooper Kupp&#39;,&#39;Keenan Allen&#39;]) pprint.pprint(nfl_team) . {&#39;Best Players&#39;: [&#39;Josh Allen&#39;, &#39;Davante Adams&#39;, &#39;Aaron Rodgers&#39;, &#39;Cooper Kupp&#39;, &#39;Keenan Allen&#39;], &#39;Country&#39;: &#39;North America&#39;, &#39;Current Season&#39;: &#39;2022-2023&#39;, &#39;League&#39;: &#39;NFL&#39;, &#39;Teams&#39;: {1: &#39;Bills&#39;, 2: &#39;Raiders&#39;, 3: &#39;Packers&#39;, 4: &#39;Chargers&#39;, 5: &#39;Falcons&#39;}} .",
            "url": "https://cubnavarro.github.io/Tri2GroupFastpages/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . The Tri 2 Final Project is an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? A database Schema is a blue print or a plan tha make up a database. It helps make up the data elements and tables without the user. . What is the purpose of identity Column in SQL database? The purpose is to provide a identifier to each row of the table | What is the purpose of a primary key in SQL database? The primary key makes a column or a certain amount of colums the idenitifies each row | What are the Data Types in SQL table? Booleans, integers, strings, OOP | . import sqlite3 database = &#39;files/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? A connection object is an object that represents a connection to the database and is used to allow the programmer to execute commands | Same for cursor object? A cursor object allows the programmer to fetch data row by row and perform different operations | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? The attributes in the conn object include many different things like varibles, row_factory and total changes | Is &quot;results&quot; an object? How do you know? Results is an object and you would know because it is set equal to cursor.execute() | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (6, &#39;Caleb&#39;, &#39;CEN&#39;, &#39;password&#39;, &#39;2006-04-14&#39;) (7, &#39;Eli&#39;, &#39;9876&#39;, &#39;hello&#39;, &#39;2005-03-21&#39;) (8, &#39;Harley&#39;, &#39;dog&#39;, &#39;dogssss&#39;, &#39;2008-05-10&#39;) (9, &#39;Charlie&#39;, &#39;dog2&#39;, &#39;dogzzzz&#39;, &#39;2023-01-14&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? In the create function it uses the data and takes the user input to create the users. 4.a can be used for simpler things while 4.b is used for more complex things | Explain purpose of SQL INSERT. Is this the same as User init? The SQL insert statement is udsed to insert rows and data into the database table | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your Password&quot;) dob = input(&quot;Enter your date of birth &#39;2006-04-14&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? The hacked part checks to make sure the length of the password is atleast 2 charaters long and if it is not 2 charaters the code will assum it was hacked. | Explain try/except, when would except occur? try/exept is used for errors that could offur when running the code. Except will occur when there is an error that dosen&#39;t pass though the try block of code. | What code seems to be repeated in each of these examples to point, why is it repeated? It is repaerted to check if the information properly matches where it supposed to go and make sure it in the right spots. | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? It can be dangerous because you could delet all of your data and information and it can not be recovered. | What is the &quot;f&quot; and {uid} do? f is used to embed expressions inside of string literals. The uid is used to imput the user id that will be used in code | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? the menu repreats because it is recursive | Could you refactor this menu? Make it work with a List? yes you could refactor the menu and make a list with the values | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . import sqlite3 from tabulate import tabulate # Connect to the SQLite database conn = sqlite3.connect(&#39;files/sqlite.db&#39;) cursor = conn.cursor() # Select all rows from the user table cursor.execute(&quot;SELECT id, _name, _uid FROM users&quot;) rows = cursor.fetchall() # Defines rows and headers table = tabulate(rows, headers=[&quot;ID&quot;, &quot;Name&quot;, &quot;User ID&quot;]) print(table)* . ID Name User ID - - 6 Caleb CEN 7 Eli 9876 8 Harley dog 9 Charlie dog2 . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Create a new Table or do something new, sqlite documentation | In implementation in previous bullet, do you see procedural abstraction? | .",
            "url": "https://cubnavarro.github.io/Tri2GroupFastpages/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object | SQLAlchemy object | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class | class User purpose | db.Model inheritance | init method | @property, @.setter&lt;/li&gt; additional methods | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL # Defining the template for users, class definition template. Used to create objects for type user. class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object # Attributes used for future defined users id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) # The constructed used to instantiate an object from our user class def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | User Object Constructors | Try / Except | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Records exist uid indi, or error. Records exist uid raven, or error. . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | user.password | def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . True . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Found {&#39;id&#39;: 7, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;&#39;, &#39;dob&#39;: &#39;03-21-2023&#39;, &#39;age&#39;: 0} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | json_ready assignment | def read(): with app.app_context(): userlist = User.query.all() user_json = [user.read() for user in userlist] return user_json read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-21-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-21-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-21-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;&#39;, &#39;dob&#39;: &#39;03-21-2023&#39;, &#39;age&#39;: 0}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . &lt;/div&gt; | .",
            "url": "https://cubnavarro.github.io/Tri2GroupFastpages/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Caleb&quot;, &#39;file&#39;: &quot;faceCSP.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . - meta data -- faceCSP Internet JPEG RGB Original size: (474, 464) Scaled size: (320, 313) -- original image -- . grey image - . . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._CSPface = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._CSPface) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def CSPface(self): return self._CSPface @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;faceCSP&quot;, &#39;file&#39;: &quot;faceCSP.png&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . - meta data -- faceCSP Internet faceCSP.png JPEG RGB Original size: (474, 464) Scaled size: (320, 313) -- scaled image -- . grey image . .",
            "url": "https://cubnavarro.github.io/Tri2GroupFastpages/face",
            "relUrl": "/face",
            "date": " • Mar 7, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Review Page",
          "content": "Write a Review . Name: . Email: . Rating: Select a rating 5 stars 4 stars 3 stars 2 stars 1 star . Review: . Recent Reviews . John Doe . Rating: 5 stars . &quot;This website is amazing! I love the design and the content.&quot; . | Jane Smith . Rating: 4 stars . &quot;Overall, a good website, but there&#39;s room for improvement.&quot; . | . &lt;/main&gt; &lt;/html&gt; &copy; 2023 Website Review Page. All rights reserved. . &lt;/body&gt; &lt;/html&gt; .",
          "url": "https://cubnavarro.github.io/Tri2GroupFastpages/_pages/Review.html",
          "relUrl": "/_pages/Review.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Schedule Maker",
          "content": "Schedule Maker . Add your activities | Organize your activities | Schedule times for activities Create A Schedule! . | . Activities: Choose a Day: Reset Save . | Monday Tuesday Wednesday Thursday Friday Saturday Sunday | Apply | . . Monday Tuesday Wednesday Thursday Friday Saturday Sunday . | | | | | | | . .",
          "url": "https://cubnavarro.github.io/Tri2GroupFastpages/markdown/",
          "relUrl": "/markdown/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Activities",
          "content": "Explore Activities To Do and You Can Use THIS To Plan Your Activities . An Activity That You Participated In . . List An Activity That You Liked or Disliked! . Add . .",
          "url": "https://cubnavarro.github.io/Tri2GroupFastpages/data/activities",
          "relUrl": "/data/activities",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Add/Explore Houses",
          "content": "Add Your House/Find A House 1. Browse Available Houses 2. Contact Us To Book In the review tabs 3. Add a house for rental with the form . Price Beds Baths Name . Housing . Name: . Price: . Beds: . Baths: . Add House . Book House 1 Book House 2 Book House 3",
          "url": "https://cubnavarro.github.io/Tri2GroupFastpages/data/database",
          "relUrl": "/data/database",
          "date": ""
      }
      
  

  

  
  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://cubnavarro.github.io/Tri2GroupFastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}