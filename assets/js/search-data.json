{
  
    
        "post0": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object | SQLAlchemy object | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class | class User purpose | db.Model inheritance | init method | @property, @.setter&lt;/li&gt; additional methods | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | User Object Constructors | Try / Except | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . OperationalError Traceback (most recent call last) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:145, in Connection.__init__(self, engine, connection, _has_events, _allow_revalidate, _allow_autobegin) 144 try: --&gt; 145 self._dbapi_connection = engine.raw_connection() 146 except dialect.loaded_dbapi.Error as err: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:3275, in Engine.raw_connection(self) 3254 &#34;&#34;&#34;Return a &#34;raw&#34; DBAPI connection from the connection pool. 3255 3256 The returned object is a proxied version of the DBAPI (...) 3273 3274 &#34;&#34;&#34; -&gt; 3275 return self.pool.connect() File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:455, in Pool.connect(self) 448 &#34;&#34;&#34;Return a DBAPI connection from the pool. 449 450 The connection is instrumented such that when its (...) 453 454 &#34;&#34;&#34; --&gt; 455 return _ConnectionFairy._checkout(self) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:1271, in _ConnectionFairy._checkout(cls, pool, threadconns, fairy) 1270 if not fairy: -&gt; 1271 fairy = _ConnectionRecord.checkout(pool) 1273 if threadconns is not None: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:719, in _ConnectionRecord.checkout(cls, pool) 718 else: --&gt; 719 rec = pool._do_get() 721 try: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py:169, in QueuePool._do_get(self) 168 with util.safe_reraise(): --&gt; 169 self._dec_overflow() 170 raise File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:147, in safe_reraise.__exit__(self, type_, value, traceback) 146 self._exc_info = None # remove potential circular references --&gt; 147 raise exc_value.with_traceback(exc_tb) 148 else: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py:166, in QueuePool._do_get(self) 165 try: --&gt; 166 return self._create_connection() 167 except: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:396, in Pool._create_connection(self) 394 &#34;&#34;&#34;Called by subclasses to create a new ConnectionRecord.&#34;&#34;&#34; --&gt; 396 return _ConnectionRecord(self) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:681, in _ConnectionRecord.__init__(self, pool, connect) 680 if connect: --&gt; 681 self.__connect() 682 self.finalize_callback = deque() File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:906, in _ConnectionRecord.__connect(self) 905 with util.safe_reraise(): --&gt; 906 pool.logger.debug(&#34;Error on connect(): %s&#34;, e) 907 else: 908 # in SQLAlchemy 1.4 the first_connect event is not used by 909 # the engine, so this will usually not be set File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:147, in safe_reraise.__exit__(self, type_, value, traceback) 146 self._exc_info = None # remove potential circular references --&gt; 147 raise exc_value.with_traceback(exc_tb) 148 else: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:901, in _ConnectionRecord.__connect(self) 900 self.starttime = time.time() --&gt; 901 self.dbapi_connection = connection = pool._invoke_creator(self) 902 pool.logger.debug(&#34;Created new connection %r&#34;, connection) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/create.py:641, in create_engine.&lt;locals&gt;.connect(connection_record) 639 return connection --&gt; 641 return dialect.connect(*cargs, **cparams) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py:580, in DefaultDialect.connect(self, *cargs, **cparams) 578 def connect(self, *cargs, **cparams): 579 # inherits the docstring from interfaces.Dialect.connect --&gt; 580 return self.loaded_dbapi.connect(*cargs, **cparams) OperationalError: unable to open database file The above exception was the direct cause of the following exception: OperationalError Traceback (most recent call last) /home/user/vscode/Tri2GroupFastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 8 in &lt;cell line: 30&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/user/vscode/Tri2GroupFastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/user/vscode/Tri2GroupFastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; print(f&#34;Records exist uid {user.uid}, or error.&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/user/vscode/Tri2GroupFastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; initUsers() /home/user/vscode/Tri2GroupFastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 8 in initUsers() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/user/vscode/Tri2GroupFastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; with app.app_context(): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/user/vscode/Tri2GroupFastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; &#34;&#34;&#34;Create database and tables&#34;&#34;&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/user/vscode/Tri2GroupFastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; db.create_all() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/user/vscode/Tri2GroupFastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; &#34;&#34;&#34;Tester data for table&#34;&#34;&#34; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu-20.04/home/user/vscode/Tri2GroupFastpages/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) File ~/anaconda3/lib/python3.9/site-packages/flask_sqlalchemy/extension.py:884, in SQLAlchemy.create_all(self, bind_key) 867 def create_all(self, bind_key: str | None | list[str | None] = &#34;__all__&#34;) -&gt; None: 868 &#34;&#34;&#34;Create tables that do not exist in the database by calling 869 ``metadata.create_all()`` for all or some bind keys. This does not 870 update existing tables, use a migration library for that. (...) 882 Added the ``bind`` and ``app`` parameters. 883 &#34;&#34;&#34; --&gt; 884 self._call_for_binds(bind_key, &#34;create_all&#34;) File ~/anaconda3/lib/python3.9/site-packages/flask_sqlalchemy/extension.py:865, in SQLAlchemy._call_for_binds(self, bind_key, op_name) 862 raise sa.exc.UnboundExecutionError(message) from None 864 metadata = self.metadatas[key] --&gt; 865 getattr(metadata, op_name)(bind=engine) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/sql/schema.py:5581, in MetaData.create_all(self, bind, tables, checkfirst) 5557 def create_all( 5558 self, 5559 bind: _CreateDropBind, 5560 tables: Optional[_typing_Sequence[Table]] = None, 5561 checkfirst: bool = True, 5562 ) -&gt; None: 5563 &#34;&#34;&#34;Create all tables stored in this metadata. 5564 5565 Conditional by default, will not attempt to recreate tables already (...) 5579 5580 &#34;&#34;&#34; -&gt; 5581 bind._run_ddl_visitor( 5582 ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables 5583 ) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:3225, in Engine._run_ddl_visitor(self, visitorcallable, element, **kwargs) 3219 def _run_ddl_visitor( 3220 self, 3221 visitorcallable: Type[Union[SchemaGenerator, SchemaDropper]], 3222 element: SchemaItem, 3223 **kwargs: Any, 3224 ) -&gt; None: -&gt; 3225 with self.begin() as conn: 3226 conn._run_ddl_visitor(visitorcallable, element, **kwargs) File ~/anaconda3/lib/python3.9/contextlib.py:119, in _GeneratorContextManager.__enter__(self) 117 del self.args, self.kwds, self.func 118 try: --&gt; 119 return next(self.gen) 120 except StopIteration: 121 raise RuntimeError(&#34;generator didn&#39;t yield&#34;) from None File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:3215, in Engine.begin(self) 3188 @contextlib.contextmanager 3189 def begin(self) -&gt; Iterator[Connection]: 3190 &#34;&#34;&#34;Return a context manager delivering a :class:`_engine.Connection` 3191 with a :class:`.Transaction` established. 3192 (...) 3213 3214 &#34;&#34;&#34; -&gt; 3215 with self.connect() as conn: 3216 with conn.begin(): 3217 yield conn File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:3251, in Engine.connect(self) 3228 def connect(self) -&gt; Connection: 3229 &#34;&#34;&#34;Return a new :class:`_engine.Connection` object. 3230 3231 The :class:`_engine.Connection` acts as a Python context manager, so (...) 3248 3249 &#34;&#34;&#34; -&gt; 3251 return self._connection_cls(self) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:147, in Connection.__init__(self, engine, connection, _has_events, _allow_revalidate, _allow_autobegin) 145 self._dbapi_connection = engine.raw_connection() 146 except dialect.loaded_dbapi.Error as err: --&gt; 147 Connection._handle_dbapi_exception_noconnection( 148 err, dialect, engine 149 ) 150 raise 151 else: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:2413, in Connection._handle_dbapi_exception_noconnection(cls, e, dialect, engine, is_disconnect, invalidate_pool_on_disconnect, is_pre_ping) 2411 elif should_wrap: 2412 assert sqlalchemy_exception is not None -&gt; 2413 raise sqlalchemy_exception.with_traceback(exc_info[2]) from e 2414 else: 2415 assert exc_info[1] is not None File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:145, in Connection.__init__(self, engine, connection, _has_events, _allow_revalidate, _allow_autobegin) 143 if connection is None: 144 try: --&gt; 145 self._dbapi_connection = engine.raw_connection() 146 except dialect.loaded_dbapi.Error as err: 147 Connection._handle_dbapi_exception_noconnection( 148 err, dialect, engine 149 ) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:3275, in Engine.raw_connection(self) 3253 def raw_connection(self) -&gt; PoolProxiedConnection: 3254 &#34;&#34;&#34;Return a &#34;raw&#34; DBAPI connection from the connection pool. 3255 3256 The returned object is a proxied version of the DBAPI (...) 3273 3274 &#34;&#34;&#34; -&gt; 3275 return self.pool.connect() File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:455, in Pool.connect(self) 447 def connect(self) -&gt; PoolProxiedConnection: 448 &#34;&#34;&#34;Return a DBAPI connection from the pool. 449 450 The connection is instrumented such that when its (...) 453 454 &#34;&#34;&#34; --&gt; 455 return _ConnectionFairy._checkout(self) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:1271, in _ConnectionFairy._checkout(cls, pool, threadconns, fairy) 1262 @classmethod 1263 def _checkout( 1264 cls, (...) 1267 fairy: Optional[_ConnectionFairy] = None, 1268 ) -&gt; _ConnectionFairy: 1270 if not fairy: -&gt; 1271 fairy = _ConnectionRecord.checkout(pool) 1273 if threadconns is not None: 1274 threadconns.current = weakref.ref(fairy) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:719, in _ConnectionRecord.checkout(cls, pool) 717 rec = cast(_ConnectionRecord, pool._do_get()) 718 else: --&gt; 719 rec = pool._do_get() 721 try: 722 dbapi_connection = rec.get_connection() File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py:169, in QueuePool._do_get(self) 167 except: 168 with util.safe_reraise(): --&gt; 169 self._dec_overflow() 170 raise 171 else: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:147, in safe_reraise.__exit__(self, type_, value, traceback) 145 assert exc_value is not None 146 self._exc_info = None # remove potential circular references --&gt; 147 raise exc_value.with_traceback(exc_tb) 148 else: 149 self._exc_info = None # remove potential circular references File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py:166, in QueuePool._do_get(self) 164 if self._inc_overflow(): 165 try: --&gt; 166 return self._create_connection() 167 except: 168 with util.safe_reraise(): File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:396, in Pool._create_connection(self) 393 def _create_connection(self) -&gt; ConnectionPoolEntry: 394 &#34;&#34;&#34;Called by subclasses to create a new ConnectionRecord.&#34;&#34;&#34; --&gt; 396 return _ConnectionRecord(self) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:681, in _ConnectionRecord.__init__(self, pool, connect) 679 self.__pool = pool 680 if connect: --&gt; 681 self.__connect() 682 self.finalize_callback = deque() File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:906, in _ConnectionRecord.__connect(self) 904 except BaseException as e: 905 with util.safe_reraise(): --&gt; 906 pool.logger.debug(&#34;Error on connect(): %s&#34;, e) 907 else: 908 # in SQLAlchemy 1.4 the first_connect event is not used by 909 # the engine, so this will usually not be set 910 if pool.dispatch.first_connect: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:147, in safe_reraise.__exit__(self, type_, value, traceback) 145 assert exc_value is not None 146 self._exc_info = None # remove potential circular references --&gt; 147 raise exc_value.with_traceback(exc_tb) 148 else: 149 self._exc_info = None # remove potential circular references File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:901, in _ConnectionRecord.__connect(self) 899 try: 900 self.starttime = time.time() --&gt; 901 self.dbapi_connection = connection = pool._invoke_creator(self) 902 pool.logger.debug(&#34;Created new connection %r&#34;, connection) 903 self.fresh = True File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/create.py:641, in create_engine.&lt;locals&gt;.connect(connection_record) 638 if connection is not None: 639 return connection --&gt; 641 return dialect.connect(*cargs, **cparams) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py:580, in DefaultDialect.connect(self, *cargs, **cparams) 578 def connect(self, *cargs, **cparams): 579 # inherits the docstring from interfaces.Dialect.connect --&gt; 580 return self.loaded_dbapi.connect(*cargs, **cparams) OperationalError: (sqlite3.OperationalError) unable to open database file (Background on this error at: https://sqlalche.me/e/20/e3q8) . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | user.password | def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dbo}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | json_ready assignment | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . &lt;/div&gt; | .",
            "url": "https://cubnavarro.github.io/Tri2GroupFastpages/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Caleb&quot;, &#39;file&#39;: &quot;faceCSP.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . - meta data -- faceCSP Internet JPEG RGB Original size: (474, 464) Scaled size: (320, 313) -- original image -- . grey image - . . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._CSPface = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._CSPface) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def CSPface(self): return self._CSPface @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;faceCSP&quot;, &#39;file&#39;: &quot;faceCSP.png&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . - meta data -- faceCSP Internet faceCSP.png JPEG RGB Original size: (474, 464) Scaled size: (320, 313) -- scaled image -- . grey image . .",
            "url": "https://cubnavarro.github.io/Tri2GroupFastpages/face",
            "relUrl": "/face",
            "date": " • Mar 7, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Review Page",
          "content": "Write a Review . Name: . Email: . Rating: Select a rating 5 stars 4 stars 3 stars 2 stars 1 star . Review: . Recent Reviews . John Doe . Rating: 5 stars . &quot;This website is amazing! I love the design and the content.&quot; . | Jane Smith . Rating: 4 stars . &quot;Overall, a good website, but there&#39;s room for improvement.&quot; . | . &lt;/main&gt; &lt;/html&gt; &copy; 2023 Website Review Page. All rights reserved. . &lt;/body&gt; &lt;/html&gt; .",
          "url": "https://cubnavarro.github.io/Tri2GroupFastpages/_pages/Review.html",
          "relUrl": "/_pages/Review.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Schedule Maker",
          "content": "Schedule Maker . Add your activities | Organize your activities | Schedule times for activities Create A Schedule! . | . Activities: Choose a Day: Reset Save . | Monday Tuesday Wednesday Thursday Friday Saturday Sunday | Apply | . . Monday Tuesday Wednesday Thursday Friday Saturday Sunday . | | | | | | | . .",
          "url": "https://cubnavarro.github.io/Tri2GroupFastpages/markdown/",
          "relUrl": "/markdown/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Activities",
          "content": "Explore Activities To Do and You Can Use THIS To Plan Your Activities . An Activity That You Participated In . . List An Activity That You Liked or Disliked! . Add . .",
          "url": "https://cubnavarro.github.io/Tri2GroupFastpages/data/activities",
          "relUrl": "/data/activities",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Add/Explore Houses",
          "content": "Add Your House/Find A House 1. Browse Available Houses 2. Contact Us To Book In the review tabs 3. Add a house for rental with the form . Price Beds Baths Name . Housing . Name: . Price: . Beds: . Baths: . Add House . Book House 1 Book House 2 Book House 3",
          "url": "https://cubnavarro.github.io/Tri2GroupFastpages/data/database",
          "relUrl": "/data/database",
          "date": ""
      }
      
  

  

  
  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://cubnavarro.github.io/Tri2GroupFastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}